{"version":3,"sources":["arrayMethods.ts"],"names":["state","arry","morphedArr","isMorphed","reducer","action","type","__assign","payload","handleButtonClick","answer","innerHTML","toString","length","btn","document","getElementById","originalArray","newArray","Error","addEventListener"],"mappings":"sPAEA,CAAA,WACE,IAAMA,EAAQ,CACZC,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/BC,WAAY,GACZC,UAAW,CAAA,C,EAGb,SAASC,EAAQJ,EAAOK,GACtB,OAAQA,EAAOC,MACb,IAAK,cACH,OAAAC,SAAAA,SAAA,GACKP,CAAK,EAAA,CACRE,WAAYG,EAAOG,OAAO,CAAA,EAG9B,IAAK,cACH,OAAAD,SAAAA,SAAA,GACKP,CAAK,EAAA,CACRE,WAAY,EAAE,CAAA,EAGlB,QACE,OAAOF,C,CAEb,CAEA,SAASS,IACP,IACQP,EADHF,EAAMG,WAmBTH,EAAQI,EAAQJ,EALD,CACbM,KAAM,cACNE,QAAS,E,CAGkB,EAE7BE,OAAOC,UAAYX,EAAME,WAAWU,SAAQ,EAE5CZ,EAAMG,UAAY,CAAA,IAtBZD,EAAaF,EAAMC,KAAKD,EAAMC,KAAKY,OAAS,GAMlDb,EAAQI,EAAQJ,EALD,CACbM,KAAM,cACNE,QAASN,C,CAGkB,EAE7BQ,OAAOC,UAAYX,EAAME,WAAWU,SAAQ,EAC5CE,IAAIH,UAAY,QAEhBX,EAAMG,UAAY,CAAA,EAatB,CAGE,IAAMW,EAAMC,SAASC,eAAe,MAAM,EACpCN,EAASK,SAASC,eAAe,QAAQ,EACzCC,EAAgBF,SAASC,eAAe,eAAe,EACvDE,EAAWH,SAASC,eAAe,UAAU,EAEnD,GAAI,EAACF,GAAQJ,GAAWO,GAAkBC,GACxC,MAAM,IAAIC,MAAM,mBAAmB,EAErCL,EAAIH,UAAY,OAEhBG,EAAIM,iBAAiB,QAASX,CAAiB,EAC/CQ,EAAcN,UAAYX,EAAMC,KAAKW,SAAQ,EAC7CM,EAASP,UAAYX,EAAME,WAAWU,SAAQ,CAIjD,EAAC","file":"arrayMethods.min.js","sourcesContent":["// app.js\n\n(function () {\n  const state = {\n    arry: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    morphedArr: [],\n    isMorphed: false,\n  };\n\n  function reducer(state, action) {\n    switch (action.type) {\n      case \"MORPH_ARRAY\":\n        return {\n          ...state,\n          morphedArr: action.payload,\n        };\n\n      case \"RESET_ARRAY\":\n        return {\n          ...state,\n          morphedArr: [],\n        };\n\n      default:\n        return state;\n    }\n  }\n\n  function handleButtonClick() {\n    if (!state.isMorphed) {\n      const morphedArr = state.arry[state.arry.length - 1];\n      const action = {\n        type: \"MORPH_ARRAY\",\n        payload: morphedArr,\n      };\n\n      state = reducer(state, action);\n\n      answer.innerHTML = state.morphedArr.toString();\n      btn.innerHTML = \"Reset\";\n\n      state.isMorphed = true;\n    } else {\n      const action = {\n        type: \"RESET_ARRAY\",\n        payload: [],\n      };\n\n      state = reducer(state, action);\n\n      answer.innerHTML = state.morphedArr.toString();\n\n      state.isMorphed = false;\n    }\n  }\n\n  function initialize() {\n    const btn = document.getElementById(\"show\");\n    const answer = document.getElementById(\"result\");\n    const originalArray = document.getElementById(\"originalArray\");\n    const newArray = document.getElementById(\"newArray\");\n\n    if (!btn || !answer || !originalArray || !newArray) {\n      throw new Error(\"Element not found\");\n    }\n    btn.innerHTML = \"Show\";\n\n    btn.addEventListener(\"click\", handleButtonClick);\n    originalArray.innerHTML = state.arry.toString();\n    newArray.innerHTML = state.morphedArr.toString();\n  }\n\n  initialize();\n})();\n"]}